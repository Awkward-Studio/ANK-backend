# name: Build and Push to ECR

# on:
#   push:
#     branches: ["main"]

# env:
#   AWS_REGION: ${{ vars.AWS_REGION }}
#   ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}
#   ECR_REPO_NAME: ${{ vars.ECR_REPO_NAME }}
#   IMAGE_TAG: latest

# jobs:
#   build-and-push:
#     runs-on: ubuntu-latest
#     permissions:
#       id-token: write # needed for OIDC
#       contents: read

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           role-to-assume: ${{ vars.AWS_ROLE_ARN }}
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v2

#       - name: Debug build context
#         run: |
#           pwd
#           git rev-parse --short HEAD
#           echo "--- top-level ---"
#           ls -la
#           echo "--- .dockerignore ---"
#           [ -f .dockerignore ] && cat .dockerignore || echo "(none)"

#       - name: Build, tag, and push image
#         run: |
#           IMAGE_URI=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO_NAME }}:${{ env.IMAGE_TAG }}
#           docker build -t $IMAGE_URI .
#           docker push $IMAGE_URI

name: Build, Push, and Deploy to ECS

on:
  push:
    branches: ["main"]

concurrency:
  group: ecs-prod
  cancel-in-progress: false

env:
  AWS_REGION: ${{ vars.AWS_REGION }} # e.g. ap-south-1
  ECR_REGISTRY: ${{ vars.ECR_REGISTRY }} # e.g. 9124....dkr.ecr.ap-south-1.amazonaws.com
  ECR_REPO_NAME: ${{ vars.ECR_REPO_NAME }} # e.g. ank-prod-backend
  ECS_CLUSTER: ${{ vars.ECS_CLUSTER }} # e.g. ank-prod-cluster
  ECS_SERVICE: ${{ vars.ECS_SERVICE }} # e.g. ank-prod-svc
  ECS_TASK_FAMILY: ${{ vars.ECS_TASK_FAMILY }} # e.g. ank-prod-taskdef
  ECS_CONTAINER_NAME: web # the container name in the task def
  TASKDEF_PATH: infra/taskdef.json # committed taskdef (see note below)

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }} # IAM role with ECR/ECS perms
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push image (immutable tag + latest)
        env:
          IMAGE_SHA: ${{ github.sha }}
        run: |
          set -euo pipefail
          IMAGE_URI="${ECR_REGISTRY}/${ECR_REPO_NAME}:${IMAGE_SHA}"
          LATEST_URI="${ECR_REGISTRY}/${ECR_REPO_NAME}:latest"

          docker build -t "${IMAGE_URI}" .
          docker tag "${IMAGE_URI}" "${LATEST_URI}"

          docker push "${IMAGE_URI}"
          docker push "${LATEST_URI}"

          echo "IMAGE_URI=${IMAGE_URI}" >> $GITHUB_ENV

      # Renders a new task definition JSON from the one committed in your repo,
      # swapping in the freshly built image for the specific container.
      - name: Render task definition
        id: render
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.TASKDEF_PATH }}
          container-name: ${{ env.ECS_CONTAINER_NAME }}
          image: ${{ env.IMAGE_URI }}

      # Registers the new revision and updates the service. Waits for stability.
      - name: Deploy to Amazon ECS
        id: deploy
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
          force-new-deployment: false

      # If something goes sideways, dump recent service events to the logs.
      - name: Dump recent ECS service events on failure
        if: failure()
        run: |
          aws ecs describe-services \
            --cluster "${ECS_CLUSTER}" \
            --services "${ECS_SERVICE}" \
            --query 'services[0].events[0:15].[createdAt,message]' \
            --output table


